name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Сборка Docker-образа
      - name: Build Docker Image
        run: |
          docker build -t express-app:latest .

      # 3. Передача Docker-образа на сервер
      - name: Transfer Docker Image
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          docker save express-app:latest | bzip2 | sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'bunzip2 | docker load'

      # 4. Очистка Docker на сервере
      - name: Prune old Docker data
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
          "docker system prune -af"

      # 5. Остановка и удаление старого контейнера
      - name: Stop and remove old container
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
          "if [ \$(docker ps -q -f name=express-app) ]; then docker stop express-app && docker rm express-app; fi"

      # 6. Освобождение порта 3000 (если занят)
      - name: Free port 3000 if occupied
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
          "if lsof -i:3000; then fuser -k 3000/tcp; fi"

      # 7. Запуск нового контейнера
      - name: Run new container
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
          "docker run -d --name express-app -p 3000:3000 express-app:latest"
