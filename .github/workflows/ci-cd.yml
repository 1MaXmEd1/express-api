name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Сборка Docker-образа
      - name: Build Docker Image
        run: |
          docker build -t express-app:latest .
          docker images

      # 3. Сохранение Docker-образа в файл
      - name: Save Docker Image
        run: |
          docker save express-app:latest | gzip > express-app.tar.gz

      # 4. Передача файла с образом на сервер
      - name: Transfer Docker Image File
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e scp -o StrictHostKeyChecking=no express-app.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

      # 5. Загрузка образа на сервере
      - name: Load Docker Image on Server
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
          "gzip -d /tmp/express-app.tar.gz && docker load < /tmp/express-app.tar && docker images"

      # 6. Остановка старого контейнера
      - name: Stop and Remove Old Container
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
          "if [ \$(docker ps -q -f name=express-app) ]; then docker stop express-app && docker rm express-app; fi"

      # 7. Запуск нового контейнера
      - name: Run New Container
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
          "docker run -d --name express-app -p 3000:3000 express-app:latest || { echo 'Failed to start container'; exit 1; }"
