name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t express-app:latest .
          echo "Docker image built successfully"

      - name: Transfer Docker Image
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          echo "Starting to transfer Docker image..."
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'rm -f /tmp/express-app.tar.gz'
          docker save express-app:latest | gzip | sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'cat > /tmp/express-app.tar.gz'
          echo "Docker image successfully transferred and saved"

      - name: Clean Up Old Images
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          echo "Cleaning up old images and containers..."
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
          docker image prune -f
          docker container prune -f
          EOF
          echo "Clean up completed successfully"

      - name: Deploy Application
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          echo "Starting application deployment..."
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
          docker load < /tmp/express-app.tar.gz
          if [ "\$(docker ps -q -f name=express-app)" ]; then
              docker stop express-app || true
              docker rm express-app || true
          fi
          docker run -d --name express-app -p 3000:3000 express-app:latest
          EOF
